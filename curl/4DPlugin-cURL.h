/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-cURL.h
 #	source generated by 4D Plugin Wizard
 #	Project : cURL
 #	author : miyako
 #	2021/03/30
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_CURL_H
#define PLUGIN_CURL_H

#include "4DPluginAPI.h"

#include "4DPlugin-JSON.h"

#include <stdio.h>
#include <time.h>
#include <mutex>
#include <chrono>

#include "curl/curl.h"
#include "json/json.h"
#include "proxy.h"

#include "iconv.h"

#include "ftpparse.h"

#pragma mark -

void cURL_VersionInfo(PA_PluginParameters params);
void cURL_Escape(PA_PluginParameters params);
void cURL_Unescape(PA_PluginParameters params);
void cURL_GetDate(PA_PluginParameters params);
void _cURL(PA_PluginParameters params);

#pragma mark -

typedef enum {
    curl_ftp_command_Delete = 1,
    curl_ftp_command_GetDirList = 2,
    curl_ftp_command_GetFileInfo = 3,
    curl_ftp_command_MakeDir = 4,
    curl_ftp_command_PrintDir = 5,
    curl_ftp_command_Receive = 6,
    curl_ftp_command_RemoveDir = 7,
    curl_ftp_command_Rename = 8,
    curl_ftp_command_Send = 9,
    curl_ftp_command_System = 10
}curl_ftp_command_t;

void cURL_FTP(PA_PluginParameters params, curl_ftp_command_t commandType);

#pragma mark -

#if VERSIONMAC
#define CPathString CUTF8String
#define CPathOpen fopen
#define CPathSeek fseek
#define CPathTell ftell
#define CPathAppend "ab"
#define CPathCreate "wb"
#define CPathRead "rb"
#else
#include <Shlobj.h>
#define CPathString CUTF16String
#define CPathOpen _wfopen
#define CPathSeek _fseeki64
#define CPathAppend L"ab"
#define CPathCreate L"wb"
#define CPathRead L"rb"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <io.h>
#include <stdio.h>
#endif

#if VERSIONMAC
typedef std::string absolute_path_t;
#define folder_separator '/'
#else
typedef std::wstring absolute_path_t;
#define folder_separator L'\\'
#endif

#if VERSIONMAC
typedef char path_t;
#else
typedef wchar_t path_t;
#endif

#if VERSIONMAC
#define LOG_CURLINFO_TEXT           "CURLINFO_TEXT.log"
#define LOG_CURLINFO_HEADER_IN      "CURLINFO_HEADER_IN.log"
#define LOG_CURLINFO_HEADER_OUT     "CURLINFO_HEADER_OUT.log"
#define LOG_CURLINFO_DATA_IN        "CURLINFO_DATA_IN.log"
#define LOG_CURLINFO_DATA_OUT       "CURLINFO_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_OUT   "CURLINFO_SSL_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_IN    "CURLINFO_SSL_DATA_IN.log"
#else
#define LOG_CURLINFO_TEXT           L"CURLINFO_TEXT.log"
#define LOG_CURLINFO_HEADER_IN      L"CURLINFO_HEADER_IN.log"
#define LOG_CURLINFO_HEADER_OUT     L"CURLINFO_HEADER_OUT.log"
#define LOG_CURLINFO_DATA_IN        L"CURLINFO_DATA_IN.log"
#define LOG_CURLINFO_DATA_OUT       L"CURLINFO_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_OUT   L"CURLINFO_SSL_DATA_OUT.log"
#define LOG_CURLINFO_SSL_DATA_IN    L"CURLINFO_SSL_DATA_IN.log"
#endif

#include "C_TEXT.h"
#include "C_BLOB.h"
#include "C_LONGINT.h"

typedef struct
{
    
    C_BLOB *data;
    
    const path_t *path;
    size_t pos;/* for read */
    curl_off_t size;/* for write */
    
    bool use_path;
    
}http_ctx;

typedef struct
{
    const path_t *path;
    
    curl_off_t size_CURLINFO_TEXT;
    curl_off_t size_CURLINFO_HEADER_IN;
    curl_off_t size_CURLINFO_HEADER_OUT;
    curl_off_t size_CURLINFO_DATA_IN;
    curl_off_t size_CURLINFO_DATA_OUT;
    curl_off_t size_CURLINFO_SSL_DATA_IN;
    curl_off_t size_CURLINFO_SSL_DATA_OUT;

}http_debug_ctx;

#define MAX_LENGTH_FOR_PATH 1024

typedef struct
{
    path_t path[MAX_LENGTH_FOR_PATH];
    path_t dir[MAX_LENGTH_FOR_PATH];
    
    size_t pos;
    FILE *f;
    BOOL useWildCard;
    BOOL shouldAppend;
}path_ctx;

typedef enum
{
    PROTOCOL_TYPE_FTP = 0,
    PROTOCOL_TYPE_SFTP = 1,
    PROTOCOL_TYPE_FTPS = 2,
    PROTOCOL_TYPE_UNKNOWN = -1
}protocol_type_t;

#endif /* PLUGIN_CURL_H */
